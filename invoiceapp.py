#!/usr/bin/env python
# coding: utf-8

# In[1]:


get_ipython().run_cell_magic('writefile', 'invoice.py', 'import streamlit as st\nimport pdfplumber\nimport re\nimport pandas as pd\n\n# --- Functions ---\ndef extract_text_from_pdf(pdf_file):\n    text = ""\n    with pdfplumber.open(pdf_file) as pdf:\n        for page in pdf.pages:\n            text += page.extract_text() + "\\n"\n    return text\n\ndef extract_invoice_data(text):\n    invoice_data = {}\n\n    # Extract main fields\n    invoice_data[\'Bill To\'] = re.search(r\'Bill To:\\s*(.+)\', text)\n    invoice_data[\'Date\'] = re.search(r\'Date:\\s*(.+)\', text)\n    invoice_data[\'Payment Terms\'] = re.search(r\'Payment Terms:\\s*(.+)\', text)\n    invoice_data[\'Due Date\'] = re.search(r\'Due Date:\\s*(.+)\', text)\n    invoice_data[\'PO Number\'] = re.search(r\'PO Number:\\s*(.+)\', text)\n    invoice_data[\'Balance Due\'] = re.search(r\'Balance Due:\\s*₹?([\\d,\\.]+)\', text)\n\n    # Process matches\n    for key, match in invoice_data.items():\n        invoice_data[key] = match.group(1).strip() if match else None\n\n    # Extract line items\n    items_pattern = re.findall(r\'(.+?)\\s+(\\d+)\\s+₹([\\d,\\.]+)\\s+₹([\\d,\\.]+)\', text)\n    items = []\n    for item in items_pattern:\n        items.append({\n            \'Item\': item[0].strip(),\n            \'Quantity\': int(item[1]),\n            \'Rate\': float(item[2].replace(\',\', \'\')),\n            \'Amount\': float(item[3].replace(\',\', \'\'))\n        })\n\n    invoice_data[\'Items\'] = items\n    return invoice_data\n\n# --- Streamlit UI ---\nst.title("PDF Invoice Extraction")\n\nuploaded_file = st.file_uploader("Upload a PDF invoice", type="pdf")\n\nif uploaded_file is not None:\n    text = extract_text_from_pdf(uploaded_file)\n    data = extract_invoice_data(text)\n    \n    st.subheader("Invoice Details")\n    main_fields = {k: v for k, v in data.items() if k != \'Items\'}\n    st.json(main_fields)\n\n    if data[\'Items\']:\n        st.subheader("Line Items")\n        df_items = pd.DataFrame(data[\'Items\'])\n        st.table(df_items)\n\n        # CSV download\n        csv = df_items.to_csv(index=False).encode(\'utf-8\')\n        st.download_button(\n            label="Download Items as CSV",\n            data=csv,\n            file_name=\'invoice_items.csv\',\n            mime=\'text/csv\'\n        )\n\n    # Optional: raw PDF text for debugging\n    with st.expander("Show raw PDF text"):\n        st.text(text)\n')

